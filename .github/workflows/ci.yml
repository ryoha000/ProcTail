name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'ProcTail.sln'

jobs:
  # Linux/WSL互換テスト
  linux-tests:
    name: Linux Compatible Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install reportgenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Run Unit Tests
      run: |
        dotnet test --configuration ${{ matrix.configuration }} \
          --no-build \
          --filter "Category=Unit" \
          --logger "trx;LogFileName=unit-tests.trx" \
          --results-directory ./TestResults \
          --collect:"XPlat Code Coverage"
          
    - name: Run Integration Tests  
      run: |
        dotnet test --configuration ${{ matrix.configuration }} \
          --no-build \
          --filter "Category=Integration" \
          --logger "trx;LogFileName=integration-tests.trx" \
          --results-directory ./TestResults \
          --collect:"XPlat Code Coverage"
          
    - name: Run Cross-Platform Tests
      run: |
        dotnet test --configuration ${{ matrix.configuration }} \
          --no-build \
          --filter "Category!=RequiresWindows&Category!=RequiresAdmin" \
          --logger "trx;LogFileName=cross-platform-tests.trx" \
          --results-directory ./TestResults \
          --collect:"XPlat Code Coverage"
          
    - name: Generate Coverage Report
      run: |
        reportgenerator \
          -reports:"./TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./TestResults/CoverageReport" \
          -reporttypes:"Html;Cobertura;Badges" \
          -verbosity:Info
          
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./TestResults/CoverageReport/Cobertura.xml
        flags: linux-tests
        name: linux-coverage
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linux-test-results-${{ matrix.configuration }}
        path: |
          ./TestResults/**/*.trx
          ./TestResults/CoverageReport/**

  # Windows統合テスト
  windows-tests:
    name: Windows System Tests
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install reportgenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ matrix.configuration }} --no-restore
      
    - name: Run Windows-specific Tests
      run: |
        dotnet test --configuration ${{ matrix.configuration }} `
          --no-build `
          --filter "Category=RequiresWindows&Category!=RequiresAdmin" `
          --logger "trx;LogFileName=windows-tests.trx" `
          --results-directory ./TestResults `
          --collect:"XPlat Code Coverage"
          
    - name: Run Performance Tests
      run: |
        dotnet test --configuration ${{ matrix.configuration }} `
          --no-build `
          --filter "Category=Performance" `
          --logger "trx;LogFileName=performance-tests.trx" `
          --results-directory ./TestResults `
          --collect:"XPlat Code Coverage"
          
    # 注意: GitHub ActionsのWindows runnerは管理者権限がないため、
    # RequiresAdminテストは実際の環境でのみ実行可能
    - name: List Admin Tests (Info Only)
      run: |
        Write-Host "管理者権限テストは以下のコマンドで実行してください:"
        Write-Host "dotnet test --filter `"Category=RequiresAdmin`""
        
    - name: Generate Coverage Report
      run: |
        reportgenerator `
          -reports:"./TestResults/**/coverage.cobertura.xml" `
          -targetdir:"./TestResults/CoverageReport" `
          -reporttypes:"Html;Cobertura;Badges" `
          -verbosity:Info
          
    - name: Upload Coverage to Codecov  
      uses: codecov/codecov-action@v3
      with:
        files: ./TestResults/CoverageReport/Cobertura.xml
        flags: windows-tests
        name: windows-coverage
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-test-results-${{ matrix.configuration }}
        path: |
          ./TestResults/**/*.trx
          ./TestResults/CoverageReport/**

  # セキュリティスキャン
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ビルド成果物作成
  build-artifacts:
    name: Build Artifacts
    runs-on: windows-latest
    needs: [linux-tests, windows-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build Release
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
      
    - name: Publish Self-Contained (win-x64)
      run: |
        dotnet publish src/ProcTail.Host/ProcTail.Host.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/win-x64 `
          -p:PublishSingleFile=true `
          -p:IncludeNativeLibrariesForSelfExtract=true
          
    - name: Create MSI Installer (Placeholder)
      run: |
        # 実際の環境では WiX Toolset などを使用してMSIを作成
        Write-Host "MSI installer creation would go here"
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: proctail-release-${{ github.sha }}
        path: |
          ./publish/**/*
          
  # テスト結果統合
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [linux-tests, windows-tests]
    if: always()
    
    steps:
    - name: Download Linux Test Results
      uses: actions/download-artifact@v4
      with:
        pattern: linux-test-results-*
        path: ./test-results/linux/
        merge-multiple: true
        
    - name: Download Windows Test Results  
      uses: actions/download-artifact@v4
      with:
        pattern: windows-test-results-*
        path: ./test-results/windows/
        merge-multiple: true
        
    - name: Generate Test Summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Linux テスト結果
        echo "## Linux Tests" >> $GITHUB_STEP_SUMMARY
        linux_trx_files=$(find ./test-results/linux -name "*.trx" | wc -l)
        echo "- TRX Files: $linux_trx_files" >> $GITHUB_STEP_SUMMARY
        
        # Windows テスト結果  
        echo "## Windows Tests" >> $GITHUB_STEP_SUMMARY
        windows_trx_files=$(find ./test-results/windows -name "*.trx" | wc -l)
        echo "- TRX Files: $windows_trx_files" >> $GITHUB_STEP_SUMMARY
        
        # カバレッジ情報
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        coverage_reports=$(find ./test-results -name "Cobertura.xml" | wc -l)
        echo "- Coverage Reports: $coverage_reports" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Consolidated Results
      uses: actions/upload-artifact@v4
      with:
        name: all-test-results-${{ github.sha }}
        path: ./test-results/**/*

  # デプロイ（メインブランチのみ）
  deploy:
    name: Deploy to Environment
    runs-on: windows-latest
    needs: [build-artifacts, test-results]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: proctail-release-${{ github.sha }}
        path: ./artifacts/
        
    - name: Deploy to Test Environment
      run: |
        Write-Host "Deployment to test environment would occur here"
        Write-Host "Artifacts available in ./artifacts/"
        
    - name: Run Smoke Tests
      run: |
        Write-Host "Smoke tests would run here"
        Write-Host "Verifying basic functionality after deployment"

  # 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy, test-results]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.deploy.result == 'success' }}
      run: echo "Pipeline completed successfully! 🎉"
      
    - name: Notify Failure
      if: ${{ needs.deploy.result == 'failure' || needs.test-results.result == 'failure' }}
      run: echo "Pipeline failed! ❌ Please check the logs."