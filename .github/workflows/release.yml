name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'ProcTail.sln'

jobs:
  build-release:
    name: Build Release Binaries
    runs-on: windows-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get Version
      id: get-version
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.tag_name }}" -replace '^v', ''
        } else {
          $version = "${{ github.ref }}" -replace 'refs/tags/v', ''
        }
        
        Write-Host "Version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        
    - name: Check Administrator Privileges
      shell: powershell
      run: |
        $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
        Write-Host "Running with Administrator privileges: $isAdmin"
        echo "ADMIN_PRIVILEGES=$isAdmin" >> $env:GITHUB_ENV
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build Release
      run: |
        dotnet build ${{ env.SOLUTION_FILE }} `
          --configuration Release `
          --no-restore `
          -p:Version=${{ steps.get-version.outputs.version }} `
          -p:FileVersion=${{ steps.get-version.outputs.version }} `
          -p:AssemblyVersion=${{ steps.get-version.outputs.version }}
          
    - name: Publish Host (Self-Contained win-x64)
      run: |
        dotnet publish src/ProcTail.Host/ProcTail.Host.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/host-win-x64 `
          -p:PublishSingleFile=false `
          -p:PublishTrimmed=false `
          -p:Version=${{ steps.get-version.outputs.version }} `
          -p:FileVersion=${{ steps.get-version.outputs.version }} `
          -p:AssemblyVersion=${{ steps.get-version.outputs.version }}
          
    - name: Publish CLI (Self-Contained win-x64)
      run: |
        dotnet publish src/ProcTail.Cli/ProcTail.Cli.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./publish/cli-win-x64 `
          -p:PublishSingleFile=false `
          -p:PublishTrimmed=false `
          -p:Version=${{ steps.get-version.outputs.version }} `
          -p:FileVersion=${{ steps.get-version.outputs.version }} `
          -p:AssemblyVersion=${{ steps.get-version.outputs.version }}
          
    - name: Publish Host (Framework-dependent)
      run: |
        dotnet publish src/ProcTail.Host/ProcTail.Host.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained false `
          --output ./publish/host-framework-dependent `
          -p:Version=${{ steps.get-version.outputs.version }} `
          -p:FileVersion=${{ steps.get-version.outputs.version }} `
          -p:AssemblyVersion=${{ steps.get-version.outputs.version }}
          
    - name: Publish CLI (Framework-dependent)
      run: |
        dotnet publish src/ProcTail.Cli/ProcTail.Cli.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained false `
          --output ./publish/cli-framework-dependent `
          -p:Version=${{ steps.get-version.outputs.version }} `
          -p:FileVersion=${{ steps.get-version.outputs.version }} `
          -p:AssemblyVersion=${{ steps.get-version.outputs.version }}
          
    - name: Create Release Package Structure
      run: pwsh.exe -ExecutionPolicy Bypass -File .github/scripts/create-release-packages.ps1 -Version "${{ steps.get-version.outputs.version }}"
        
    - name: Create ZIP Archives
      run: pwsh.exe -ExecutionPolicy Bypass -File .github/scripts/create-zip-archives.ps1 -Version "${{ steps.get-version.outputs.version }}"
        
    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ steps.get-version.outputs.version }}
        path: |
          ./release-packages/*.zip
          ./release-packages/checksums.txt
          
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write
      packages: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download Release Artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.build-release.outputs.version }}
        path: ./release-artifacts/
        
    - name: Generate Release Notes
      id: release-notes
      run: .github/scripts/generate-release-notes.sh "${{ needs.build-release.outputs.version }}"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
        name: ProcTail ${{ needs.build-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || contains(needs.build-release.outputs.version, '-') }}
        files: |
          ./release-artifacts/*.zip
          ./release-artifacts/checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release Summary
      run: |
        version="${{ needs.build-release.outputs.version }}"
        release_url="https://github.com/${{ github.repository }}/releases/tag/v$version"
        
        echo "# üöÄ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** $version" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL:** [$release_url]($release_url)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üì¶ Release Assets" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for file in ./release-artifacts/*.zip; do
          if [[ -f "$file" ]]; then
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            echo "- ‚úÖ $filename ($size)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. „É™„É™„Éº„Çπ„Éö„Éº„Ç∏„Åß„Ç¢„Çª„ÉÉ„Éà„Å®„É™„É™„Éº„Çπ„Éé„Éº„Éà„ÇíÁ¢∫Ë™ç" >> $GITHUB_STEP_SUMMARY
        echo "2. „É¶„Éº„Ç∂„Éº„Å´Êñ∞„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂà©Áî®ÂèØËÉΩÊÄß„ÇíÈÄöÁü•" >> $GITHUB_STEP_SUMMARY
        echo "3. „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíÊõ¥Êñ∞ÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ôºâ" >> $GITHUB_STEP_SUMMARY

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-release, create-release]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.create-release.result == 'success' }}
      run: |
        echo "üéâ ProcTail ${{ needs.build-release.outputs.version }} has been successfully released!"
        echo "Release is now available on GitHub Releases."
        
    - name: Notify Failure
      if: ${{ needs.create-release.result == 'failure' || needs.build-release.result == 'failure' }}
      run: |
        echo "‚ùå Release process failed for ProcTail ${{ needs.build-release.outputs.version || 'Unknown' }}"
        echo "Please check the workflow logs for details."